---
- hosts: localhost
  connection: local
  vars:
    project_name: "myproject"
    username: "system:admin"
    password: "lala"
    master_url: "https://127.0.0.1:8443/"
  tasks:

  - name: login as {{ username }} (must be cluster-admin)
    shell: "oc login -u system:admin"
    # shell: "oc login -u {{ username }} -p {{ password }} {{ master_url }}"
    # shell: oc login https://127.0.0.1:8443 --token=FwgcAV8Wz0TPuLIQYzNY9kKvLSoMS5MUvA0UzVXFl9s


  - name: Create project {{ project_name }}
    shell: "oc new-project {{ project_name }}"
    register: project_result
    failed_when: "'AlreadyExists' not in project_result.stderr and project_result.rc != 0"

  - name: Add permissions
    shell: "oc adm policy add-scc-to-user {{ item }} -z default -n {{ project_name }}"
    with_items:
      - anyuid
      - privileged

  - name: Create pvc
    shell: "oc apply -f kubernetes/fabric-pvc-nolabel.yaml -n {{ project_name }}"

  - name: Create Fabric Tools Helper
    shell: "oc apply -f kubernetes/fabric-tools.yaml -n {{ project_name }}"
 
  - name: Wait fabric container to be running
    shell: "oc get pod -n {{ project_name }} | grep -i fabric"
    register: fabric_container
    until: fabric_container.stdout.find("Running") != -1
    retries: 60
    delay: 20
  
  - name: Create fabric tools dirs
    shell: "oc -n {{ project_name }} exec -it fabric-tools -- mkdir -p /fabric/config"

  - name: Copy config files to fabric tools containers
    shell: "oc -n {{ project_name }} cp config fabric-tools:/fabric"

  - name: Copy chaincode to pvc
    shell: "oc -n {{ project_name }} cp chaincode/ fabric-tools:/fabric"
    
  - name: Copy scripts to pvc
    shell: "oc -n {{ project_name }} cp scripts fabric-tools:/fabric"

  - name: Copy external-builder to pvc
    shell: "oc -n {{ project_name }} cp external-builder fabric-tools:/fabric"

  - name: Cryptogen
    shell: oc -n "{{ project_name }}" exec fabric-tools -- bash -c "cryptogen generate --config /fabric/config/crypto-config.yaml"
  
  - name: Copy files 1
    shell: oc -n "{{ project_name }}" exec fabric-tools -- cp -r crypto-config /fabric/
  
  - name: Copy files 2
    shell: oc -n "{{ project_name }}" exec fabric-tools -- bash -c 'for file in $(find /fabric/ -iname *_sk); do echo $file; dir=$(dirname $file); mv ${dir}/*_sk ${dir}/key.pem; done'

  - name: Generate orderer genesis block
    shell: oc -n "{{ project_name }}" exec fabric-tools -- bash -c "cp /fabric/config/configtx.yaml /fabric/ && cd /fabric && configtxgen -profile SampleMultiNodeEtcdRaft -channelID byfn-sys-channel -outputBlock ./channel-artifacts/genesis.block"

  - name: Generate channel configuration transaction
    shell: oc -n "{{ project_name }}" exec fabric-tools -- bash -c "cp /fabric/config/configtx.yaml /fabric/ && cd /fabric && configtxgen -profile TwoOrgsChannel -channelID mychannel --outputCreateChannelTx ./channel-artifacts/channel.tx"

  - name: Create Anchor Peers
    shell: oc -n "{{ project_name }}" exec fabric-tools -- bash -c "{{ item }}"
    with_items:
      - "cd /fabric && configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP"
      - "cd /fabric && configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID mychannel -asOrg Org2MSP"

  - name: Fix permissions
    shell: oc -n "{{ project_name }}" exec fabric-tools -- bash -c "chmod a+rx /fabric/* -R"

  - name: Create Orderer
    shell: oc -n "{{ project_name }}" apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-orderer_deploy.yaml
      - kubernetes/blockchain-orderer_svc.yaml
  
  - name: Create Orderer2
    shell: oc -n "{{ project_name }}" apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-orderer2_deploy.yaml
      - kubernetes/blockchain-orderer2_svc.yaml

  - name: Create Orderer3
    shell: oc -n "{{ project_name }}" apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-orderer3_deploy.yaml
      - kubernetes/blockchain-orderer3_svc.yaml

  - name: Create Orderer4
    shell: oc -n "{{ project_name }}" apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-orderer4_deploy.yaml
      - kubernetes/blockchain-orderer4_svc.yaml

  - name: Create Orderer5
    shell: oc -n "{{ project_name }}" apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-orderer5_deploy.yaml
      - kubernetes/blockchain-orderer5_svc.yaml

#TODO: core.yaml mounten

  - name: Create org1 and peer
    shell: oc -n "{{ project_name }}" apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-org1peer0_deploy.yaml
      - kubernetes/blockchain-org1peer1_deploy.yaml
      - kubernetes/blockchain-org1peer0_svc.yaml
      - kubernetes/blockchain-org1peer1_svc.yaml
  
  - name: Create org2 and peer
    shell: oc -n "{{ project_name }}" apply -f "{{ item }}"
    with_items:
      - kubernetes/blockchain-org2peer0_deploy.yaml
      - kubernetes/blockchain-org2peer1_deploy.yaml
      - kubernetes/blockchain-org2peer0_svc.yaml
      - kubernetes/blockchain-org2peer1_svc.yaml

  - name: Wait till all pods are running 
    shell: oc get pods -o json
    register: oc_get_pods
    until: oc_get_pods.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
    retries: 60
    delay: 20

  - pause: seconds=10

  - name: Create channel
    shell: >
      oc -n "{{ project_name }}" exec fabric-tools -- bash -c 'export FABRIC_CFG_PATH=/fabric && export CORE_PEER_MSPCONFIGPATH=/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/ && export CORE_PEER_ADDRESS=org1peer0:30110 && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt && export CHANNEL_NAME=mychannel && export FABRIC_CFG_PATH=/fabric/config/ && peer channel create -o orderer:31010 -c $CHANNEL_NAME -f /fabric/channel-artifacts/channel.tx --tls --cafile /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem'
  
    register: channel_result
    failed_when: "'version 0, but got version 1' not in channel_result.stderr and channel_result.rc != 0"

  - pause: seconds=10
  
  - name: Join channel Org1
    shell: >
      oc -n "{{ project_name }}" exec fabric-tools -- bash -c 'export CORE_PEER_MSPCONFIGPATH=/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/ && export CORE_PEER_ADDRESS=org1peer0:30110 && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt && export CHANNEL_NAME=mychannel && export FABRIC_CFG_PATH=/fabric/config/ && peer channel join -b $CHANNEL_NAME.block'

  - name: Join channel Org2
    shell: >
      oc -n "{{ project_name }}" exec fabric-tools -- bash -c 'export CORE_PEER_MSPCONFIGPATH=/fabric/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/ && export CORE_PEER_ADDRESS=org2peer0:30110 && export CORE_PEER_LOCALMSPID="Org2MSP" && export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt && export CHANNEL_NAME=mychannel && export FABRIC_CFG_PATH=/fabric/config/ && peer channel join -b $CHANNEL_NAME.block'

  - name: Update anchor peers Org1
    shell: >
      oc -n "{{ project_name }}" exec fabric-tools -- bash -c 'export CORE_PEER_MSPCONFIGPATH=/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/ && export CORE_PEER_ADDRESS=org1peer0:30110 && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt && export CHANNEL_NAME=mychannel && export FABRIC_CFG_PATH=/fabric/config/ && peer channel update -o orderer:31010  -c $CHANNEL_NAME -f /fabric/channel-artifacts/Org1MSPanchors.tx --tls --cafile /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem'

  - name: Update anchor peers Org2
    shell: >
       oc -n "{{ project_name }}"  exec fabric-tools -- bash -c 'export CORE_PEER_MSPCONFIGPATH=/fabric/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp/ && export CORE_PEER_ADDRESS=org2peer0:30110 && export CORE_PEER_LOCALMSPID="Org2MSP" && export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt && export CHANNEL_NAME=mychannel && export FABRIC_CFG_PATH=/fabric/config/ && peer channel update -o orderer:31010  -c $CHANNEL_NAME -f /fabric/channel-artifacts/Org2MSPanchors.tx --tls --cafile /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem'
  
  # - name: Let chaincode process give it to its best
  #   shell: >
  #     oc -n "{{ project_name }}" exec fabric-tools -- bash -c '/fabric/scripts/deployCC.sh'

  
  # - name: Deploy Hyperledger Explorer Database
  #   shell: "oc apply -f kubernetes/blockchain-explorer-db_deploy.yaml -n {{ project_name }}"

  # - name: Create Explorer Service
  #   shell: "oc apply -f kubernetes/blockchain-explorer-db_svc.yaml -n {{ project_name }}"

  # - name: Wait for postgresql to be ready
  #   shell: oc get po -n "{{ project_name }}" | grep -i blockchain-explorer-db
  #   register: postgresql_explorer
  #   until: postgresql_explorer.stdout.find("Running") != -1
  #   retries: 60
  #   delay: 40

  # - name: Populate database
  #   shell: |
  #     pod=$(oc get pods | grep blockchain-explorer-db | awk '{print $1}')
  #     oc -n "{{ project_name }}" exec $pod -- bash -c 'mkdir -p /fabric/config/explorer/db/ && mkdir -p /fabric/config/explorer/app/ && cd /fabric/config/explorer/db/ && wget https://raw.githubusercontent.com/hyperledger/blockchain-explorer/master/app/persistence/fabric/postgreSQL/db/createdb.sh -O createdb.sh && wget https://raw.githubusercontent.com/hyperledger/blockchain-explorer/master/app/persistence/fabric/postgreSQL/db/explorerpg.sql -O explorerpg.sql && wget https://raw.githubusercontent.com/hyperledger/blockchain-explorer/master/app/persistence/fabric/postgreSQL/db/processenv.js -O processenv.js && wget https://raw.githubusercontent.com/hyperledger/blockchain-explorer/master/app/persistence/fabric/postgreSQL/db/updatepg.sql -O updatepg.sql && apk update && apk add jq ; apk add nodejs ; apk add sudo ; rm -rf /var/cache/apk/* && chmod +x ./createdb.sh && ./createdb.sh'

  # - name: Copy network file
  #   shell: oc -n "{{ project_name }}" cp config/explorer/app/config.json fabric-tools:/fabric/config/explorer/app/
  #   ignore_errors: true

  # - name: Copy run.sh
  #   shell: chmod +x config/explorer/app/run.sh && oc -n "{{ project_name }}" cp config/explorer/app/run.sh fabric-tools:/fabric/config/explorer/app/
  #   ignore_errors: true
    
  # - name: Deploy explorer
  #   shell: "oc apply -f kubernetes/blockchain-explorer-app_deploy.yaml -n {{ project_name }}"

  # - name: Create explorer svc
  #   shell: "oc expose deployment blockchain-explorer-app --port=8080 -n {{ project_name }} || echo 'ja existe'"

  # - name: Create explorer route
  #   shell: "oc expose svc/blockchain-explorer-app -n {{ project_name }} || echo 'ja existe'"

  # - name: Remove helper pod
  #   shell: "oc delete -f kubernetes/fabric-tools.yaml -n {{ project_name }}"