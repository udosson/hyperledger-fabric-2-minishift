Error: query failed with status: 500 - Failed to authorize invocation due to failed ACL check: Failed evaluating policy on signed data during check policy on channel [mychannel] with policy [/Channel/Application/Writers]: [implicit policy evaluation failed - 0 sub-policies were satisfied, but this policy requires 1 of the 'Writers' sub-policies to be satisfied]", "!!!!!!!!!!!!!!! After 5 attempts, Check commit readiness result on peer0.org1 is INVALID !!!!!!!!!!!!!!!!", "================== ERROR !!! FAILED to execute End-2-End Scenario =================="]}

oc -n "myproject" exec fabric-tools -- bash -c 'cp -r /fabric/chaincode $GOPATH/src/ && export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp" && export CORE_PEER_LOCALMSPID="Org2MSP" && export CORE_PEER_ADDRESS="org2peer0:30110" && export CHANNEL_NAME=mychannel && export ORDERER_CA="/fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem" && peer lifecycle chaincode checkcommitreadiness --channelID $CHANNEL_NAME --name fabcar --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses $CORE_PEER_ADDRESS --version ${CHAINCODE_VERSION} --output json --init-required' 


oc -n "myproject" exec fabric-tools -- bash -c 'cp -r /fabric/chaincode $GOPATH/src/ && export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp" && export CORE_PEER_LOCALMSPID="Org2MSP" && export CORE_PEER_ADDRESS="org2peer0:30110" && export CHANNEL_NAME=mychannel && export ORDERER_CA="/fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem" && peer lifecycle chaincode queryinstalled >&log.txt'

oc -n "myproject" exec fabric-tools -- bash -c 'cp -r /fabric/chaincode $GOPATH/src/ && export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp" && export CORE_PEER_LOCALMSPID="Org2MSP" && export CORE_PEER_ADDRESS="org2peer0:30110" && peer lifecycle chaincode install fabcar.tar.gz'

/fabric/chaincode/fabcar/go/

oc -n "myproject" exec fabric-tools -- bash -c 'CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_ADDRESS="org1peer0:30110" && peer lifecycle chaincode package fabcar.tar.gz --path /fabric/chaincode/fabcar/go/ --lang ${CC_RUNTIME_LANGUAGE} --label fabcar_${CHAINCODE_VERSION}' 

oc -n "myproject" exec fabric-tools -- bash -c 'export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_ADDRESS="org1peer0:30110" && peer lifecycle chaincode install fabcar.tar.gz'

oc -n "myproject" exec fabric-tools -- bash -c 'cp -r /fabric/chaincode $GOPATH/src/ && export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp" && export CORE_PEER_LOCALMSPID="Org2MSP" && export CORE_PEER_ADDRESS="org2peer0:30110" && peer lifecycle chaincode install fabcar.tar.gz'

oc -n "myproject" exec fabric-tools -- bash -c 'export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_ADDRESS="org1peer0:30110" && peer lifecycle chaincode queryinstalled >&log.txt && cat log.txt && export PACKAGE_ID=$(sed -n "/fabcar_${VERSION}/{s/^Package ID: //; s/, Label:.*$//; p;}" log.txt)'



-----
package_ID muss übertragen werden
-----

oc -n "myproject" exec fabric-tools -- bash -c 'export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_ADDRESS="org1peer0:30110" && export CHANNEL_NAME=mychannel && export ORDERER_CA="/fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem" && peer lifecycle chaincode approveformyorg -o orderer:31010  --ordererTLSHostnameOverride orderer --tls --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name fabcar --version ${VERSION} --init-required --package-id fabcar_1.0:a6c665ce97362d64a45a339e0c1d3fbc3602c2b9cc4b67fd20e95b11a1f63650'


 oc -n "myproject" exec fabric-tools -- bash -c 'export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp" && export CORE_PEER_LOCALMSPID="Org2MSP" && export CORE_PEER_ADDRESS="org2peer0:30110" && export CHANNEL_NAME=mychannel && export ORDERER_CA="/fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem" && peer lifecycle chaincode approveformyorg -o orderer:31010  --ordererTLSHostnameOverride orderer --tls --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name fabcar --version ${VERSION} --init-required --package-id fabcar_1.0:a6c665ce97362d64a45a339e0c1d3fbc3602c2b9cc4b67fd20e95b11a1f63650'

 oc -n "myproject" exec fabric-tools -- bash -c 'export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_ADDRESS="org1peer0:30110" && export CHANNEL_NAME=mychannel && export ORDERER_CA="/fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem" && peer lifecycle chaincode commit -o orderer:31010 --ordererTLSHostnameOverride orderer --tls --cafile $ORDERER_CA --channelID $CHANNEL_NAME --name fabcar --peerAddresses $CORE_PEER_ADDRESS --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses org2peer0:30110 --tlsRootCertFiles /fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt --version ${VERSION} --init-required'

 oc -n "myproject" exec fabric-tools -- bash -c 'export CORE_PEER_TLS_ROOTCERT_FILE=/fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt && export CC_RUNTIME_LANGUAGE="golang" && export CHAINCODE_VERSION="1.0" && export FABRIC_CFG_PATH="/etc/hyperledger/fabric" && export CORE_PEER_MSPCONFIGPATH="/fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp" && export CORE_PEER_LOCALMSPID="Org1MSP" && export CORE_PEER_ADDRESS="org1peer0:30110" && export CHANNEL_NAME=mychannel && export ORDERER_CA="/fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem" && peer chaincode invoke -o orderer:31010 --ordererTLSHostnameOverride orderer --tls --cafile $ORDERER_CA -C $CHANNEL_NAME -n fabcar --peerAddresses $CORE_PEER_ADDRESS --tlsRootCertFiles $CORE_PEER_TLS_ROOTCERT_FILE --peerAddresses org2peer0:30110 --tlsRootCertFiles /fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt --isInit -c '{"function":"initLedger","Args":[]}''

 --> herausfinden, wie man über oc mit den Anführungszeichen umgeht. Problem: ' '""''

 peer chaincode invoke -o orderer:31010 --isInit --tls true --cafile /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc --peerAddresses org1peer0:30110 --tlsRootCertFiles /fabric/crypto-config/peerOrganizations/org1.example.com/peers/org1peer0/tls/ca.crt --peerAddresses peer0.org2peer0:30110 --tlsRootCertFiles /fabric/crypto-config/peerOrganizations/org2.example.com/peers/org2peer0/tls/ca.crt -c '{"Args":["Init","a","100","b","100"]}' --waitForEvent


 oc logs org1peer0-57c864f778-27sng -c peer &> /Users/robinklemens/Documents/GitHub/hl-fabric-2.0-openshift-byfn/logs